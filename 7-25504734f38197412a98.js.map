{"version":3,"sources":["webpack:///../page-header/PageHeader.js","webpack:///../page-header/index.js"],"names":["PageHeader","payerId","spaceName","spaceId","children","appName","appAbbr","iconColor","branded","crumbs","feedback","feedbackProps","component","Tag","tag","clientId","iconSrc","iconAlt","props","spaceForSpaceID","useSpace","spaceForPayerID","spaceForPayerIDLoading","_space","payerLogo","logoAttrs","className","skeletonProps","width","height","spaceIds","payerIds","_spaceName","name","url","React","active","color","title","src","alt"],"mappings":"0LAOA,IAAMA,EAAa,SAAC,GAkBb,IAjBLC,EAiBI,EAjBJA,QACAC,EAgBI,EAhBJA,UACAC,EAeI,EAfJA,QACAC,EAcI,EAdJA,SACAC,EAaI,EAbJA,QACAC,EAYI,EAZJA,QACAC,EAWI,EAXJA,UACAC,EAUI,EAVJA,QACAC,EASI,EATJA,OACAC,EAQI,EARJA,SACAC,EAOI,EAPJA,cACAC,EAMI,EANJA,UACKC,EAKD,EALJC,IACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,QACGC,E,oIACC,gLACWC,EAAoBC,YAD/B,WAEgEA,YAFhE,GAEWC,EAFX,QAEqCC,EAFrC,UAMEC,EAASJ,GAAf,EAEIK,EAAJ,KACA,KAAa,CACX,IAAMC,EAAY,CAChBtB,QADgB,EAEhBF,QAFgB,EAGhByB,UAHgB,gCAIhBC,cAAe,CACbC,MADa,IAEbC,OAAQ,SAGZL,EACEH,KACE,sBADFA,GAGE,uBACES,SAAU3B,EAAU,CAAH,QADnB,EAEE4B,SAAU,CAFZ,GAGEhB,SAAUA,GAEV,sBATNS,IAcF,IAAMQ,EAAa9B,GAAcqB,GAAUA,EAA3C,KAOA,OANIpB,GAAJ,KACEM,EAAS,CACP,CAAEwB,KAAF,EAAoBC,IAAK/B,GAAO,wBAA4BA,KAK9D,kBAAC,IAAD,cACE,yBAAKuB,UAAU,4BACZS,wBAGC,uBAAa1B,OAAb,EAA6B2B,OAAQ/B,GAAWD,IALtD,GASE,mCAAKsB,UAAU,iCAAf,GACE,yBAAKA,UAAU,sBACXzB,GAAD,GACC,uBACEoC,MADF,EAEE7B,QAFF,EAGE8B,MAHF,EAIEC,IAJF,EAKEC,IAAKvB,GAPX,OAYGb,GAbL,KAkBGM,GACC,qCACEL,QADF,EAEEqB,UAAS,kCAAmCzB,EAAO,OAA1C,KA/BnB,OAmEFD,eAA0B,CACxBc,IADwB,KAIxBX,QAJwB,KAKxBF,QAAS,MAGX,QC1IA","file":"7-25504734f38197412a98.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Breadcrumbs from '@availity/breadcrumbs';\nimport AppIcon from '@availity/app-icon';\nimport Feedback from '@availity/feedback';\nimport Spaces, { SpacesLogo, useSpace } from '@availity/spaces';\n\nconst PageHeader = ({\n  payerId,\n  spaceName,\n  spaceId,\n  children,\n  appName,\n  appAbbr,\n  iconColor,\n  branded,\n  crumbs,\n  feedback,\n  feedbackProps,\n  component,\n  tag: Tag,\n  clientId,\n  iconSrc,\n  iconAlt,\n  ...props\n}) => {\n  const { space: spaceForSpaceID } = useSpace(spaceId);\n  const { space: spaceForPayerID, loading: spaceForPayerIDLoading } = useSpace(\n    payerId\n  );\n\n  const _space = spaceForSpaceID || spaceForPayerID;\n\n  let payerLogo = null;\n  if (payerId) {\n    const logoAttrs = {\n      spaceId,\n      payerId,\n      className: 'float-md-right d-inline-block',\n      skeletonProps: {\n        width: 180,\n        height: '100%',\n      },\n    };\n    payerLogo =\n      spaceForPayerID || spaceForPayerIDLoading ? (\n        <SpacesLogo {...logoAttrs} />\n      ) : (\n        <Spaces\n          spaceIds={spaceId ? [spaceId] : undefined}\n          payerIds={[payerId]}\n          clientId={clientId}\n        >\n          <SpacesLogo {...logoAttrs} />\n        </Spaces>\n      );\n  }\n\n  const _spaceName = spaceName || (_space && _space.name);\n  if (spaceId || spaceName) {\n    crumbs = [\n      { name: _spaceName, url: spaceId && `/web/spaces/spaces/#/${spaceId}` },\n    ];\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"d-flex align-items-start\">\n        {React.isValidElement(crumbs) ? (\n          crumbs\n        ) : (\n          <Breadcrumbs crumbs={crumbs} active={appName || children} />\n        )}\n        {component}\n      </div>\n      <Tag className=\"page-header page-header-brand\" {...props}>\n        <div className=\"page-header-title\">\n          {!payerId && appAbbr && (\n            <AppIcon\n              color={iconColor}\n              branded={branded}\n              title={appName}\n              src={iconSrc}\n              alt={iconAlt}\n            >\n              {appAbbr}\n            </AppIcon>\n          )}{' '}\n          {children || appName}\n        </div>\n\n        {payerLogo}\n\n        {feedback && (\n          <Feedback\n            appName={appName}\n            className={`float-md-right d-inline-block ${payerId ? 'mx-3' : ''}`}\n            {...feedbackProps}\n          />\n        )}\n      </Tag>\n    </React.Fragment>\n  );\n};\n\nPageHeader.propTypes = {\n  appName: PropTypes.string.isRequired,\n  spaceName: PropTypes.string,\n  spaceId: PropTypes.string,\n  appAbbr: PropTypes.string,\n  iconColor: PropTypes.string,\n  branded: PropTypes.bool,\n  payerId: PropTypes.string,\n  component: PropTypes.element,\n  feedback: PropTypes.bool,\n  feedbackProps: PropTypes.shape({ ...Feedback.propTypes }),\n  children: PropTypes.node,\n  crumbs: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string,\n      })\n    ),\n    PropTypes.node,\n  ]),\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  clientId: PropTypes.string,\n  iconSrc: PropTypes.string,\n  iconAlt: PropTypes.string,\n};\n\nPageHeader.defaultProps = {\n  tag: 'h1',\n  // SpaceId and payerId are defaulted to null to prevent `useSpace` from\n  // returning a space we may not want\n  spaceId: null,\n  payerId: null,\n};\n\nexport default PageHeader;\n","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n"],"sourceRoot":""}