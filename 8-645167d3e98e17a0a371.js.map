{"version":3,"sources":["webpack:///../packages/spaces/src/helpers.js","webpack:///../packages/spaces/src/Spaces.js","webpack:///../packages/spaces/src/SpacesImage.js","webpack:///../packages/spaces/src/SpacesDisclaimer.js","webpack:///../packages/spaces/src/SpacesAgreement.js","webpack:///../packages/spaces/src/SpacesGhostText.js","webpack:///../packages/spaces/index.js","webpack:///../packages/page-header/PageHeader.js","webpack:///../packages/page-header/index.js"],"names":["INITIAL_STATE","spaces","loading","error","actions","SPACES","ERROR","LOADING","state","spacesReducer","action","getAllSpaces","a","async","_spaces","query","variables","headers","clientId","totalCount","page","perPage","unionedSpaces","vars","SpacesContext","createContext","useSpacesContext","useContext","Spaces","spaceIds","payerIds","children","spacesFromProps","useReducer","dispatch","useEffectAsync","type","filteredSpaceIDs","id","spc","filteredPayerIDs","pId","ids","spacesBySpaceIDs","payerIDs","spacesByPayerIDs","message","spacesForProvider","pairFields","field","Array","name","value","_accum","accum","sanitizeSpaces","isFunction","useSpaces","idsIsEmpty","callerIsExpectingFirstSpace","console","shouldReturnAllSpaces","filteredSpaces","s","p","types","Loader","skeletonProps","rest","height","SpacesImage","spaceId","payerId","imageType","fallback","props","space","url","get","data-testid","src","alt","loader","defaults","str","SpecificSpacesImage","SpacesDisclaimer","styled","markdown","disclaimer","source","SpacesAgreement","agreement","SpacesLogo","PageHeader","spaceName","appName","appAbbr","iconColor","branded","crumbs","showFeedback","feedback","feedbackProps","titleProps","titleClassName","className","restTitleProps","RenderRightContent","renderRightContent","renderRightClassName","component","Tag","tag","iconSrc","iconAlt","homeUrl","linkTag","spaceForSpaceID","spaceForPayerID","spacesIsLoading","_space","payerLogo","logoAttrs","width","_spaceName","useMemo","React","active","classNames","color","title"],"mappings":"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","file":"8-645167d3e98e17a0a371.js","sourcesContent":["export const INITIAL_STATE = {\n  spaces: [],\n  loading: true,\n  error: null,\n};\n\nexport const actions = {\n  SPACES: (_, { spaces }) => ({\n    spaces: spaces || [],\n    error: null,\n    loading: false,\n  }),\n  ERROR: (state, { error }) => ({\n    ...state,\n    loading: false,\n    error,\n  }),\n  LOADING: (state, { loading }) => ({\n    ...state,\n    loading: loading !== undefined ? loading : !state.loading,\n  }),\n};\n\nexport const spacesReducer = (state, action) =>\n  actions[action.type](state, action);\n\nexport const sanitizeSpaces = spaces => {\n  // Normalize space pairs ( [{ name, value }] => { name: value } )\n  const pairFields = ['images', 'metadata', 'colors', 'icons', 'mapping'];\n  return spaces.reduce((accum, spc) => {\n    pairFields.forEach(field => {\n      if (spc[field] && Array.isArray(spc[field])) {\n        spc[field] = spc[field].reduce((_accum, { name, value }) => {\n          _accum[name] = value;\n          return _accum;\n        }, {});\n      }\n    });\n\n    accum.push(spc);\n    return accum;\n  }, []);\n};\n\nexport const isFunction = obj => typeof obj === 'function';\n","import React, { createContext, useContext, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { avSlotMachineApi } from '@availity/api-axios';\nimport { useEffectAsync } from '@availity/hooks';\nimport {\n  spacesReducer,\n  INITIAL_STATE,\n  sanitizeSpaces,\n  isFunction,\n} from './helpers';\n\nexport const getAllSpaces = async (\n  query,\n  clientId,\n  variables,\n  _spaces = []\n) => {\n  if (!clientId) {\n    throw new Error('clientId is required');\n  }\n\n  const {\n    data: {\n      data: { spaces },\n    },\n  } = await avSlotMachineApi.create(\n    {\n      query,\n      variables,\n    },\n    { headers: { 'X-Client-ID': clientId } }\n  );\n\n  const { totalCount, page, perPage } = spaces;\n  const unionedSpaces = _spaces.concat(spaces.spaces);\n\n  if (totalCount > page * perPage) {\n    const vars = { ...variables, page: page + 1 };\n    return getAllSpaces(query, clientId, vars, unionedSpaces);\n  }\n\n  return unionedSpaces;\n};\n\nexport const SpacesContext = createContext();\n\nexport const useSpacesContext = () => useContext(SpacesContext);\n\nconst Spaces = ({\n  query,\n  variables,\n  clientId,\n  spaceIds,\n  payerIds,\n  children,\n  spaces: spacesFromProps,\n}) => {\n  const [{ spaces, loading, error }, dispatch] = useReducer(\n    spacesReducer,\n    INITIAL_STATE\n  );\n\n  // NOTE: we do not want to query slotmachine by payerIDs and spaceIDs at the same time\n  // because slotmachine does an AND on those conditions. We want OR\n  useEffectAsync(async () => {\n    try {\n      dispatch({\n        type: 'LOADING',\n        loading: true,\n      });\n      // Filter out dupes and ids that we already have the space for\n      const filteredSpaceIDs = spaceIds\n        .filter((id, i) => spaceIds.indexOf(id) === i)\n        .filter(id => !spaces.some(spc => spc && spc.id === id))\n        .filter(id => !spacesFromProps.some(spc => spc && spc.id === id));\n\n      const filteredPayerIDs = payerIds\n        .filter((id, i) => payerIds.indexOf(id) === i)\n        .filter(\n          id =>\n            !spaces.some(\n              spc => spc && spc.payerIDs && spc.payerIDs.some(pId => pId === id)\n            )\n        )\n        .filter(\n          id =>\n            !spacesFromProps.some(\n              spc => spc && spc.payerIDs && spc.payerIDs.some(pId => pId === id)\n            )\n        );\n\n      let _spaces = [];\n      if (filteredSpaceIDs.length > 0) {\n        const vars = { ...variables, ids: filteredSpaceIDs };\n        const spacesBySpaceIDs = await getAllSpaces(\n          query,\n          clientId,\n          vars,\n          spaces\n        );\n        _spaces = _spaces.concat(spacesBySpaceIDs);\n      }\n\n      if (filteredPayerIDs.length > 0) {\n        const vars = { ...variables, payerIDs: filteredPayerIDs };\n        const spacesByPayerIDs = await getAllSpaces(\n          query,\n          clientId,\n          vars,\n          spaces\n        );\n        _spaces = _spaces.concat(spacesByPayerIDs);\n      }\n\n      dispatch({\n        type: 'SPACES',\n        spaces: _spaces,\n      });\n    } catch (error_) {\n      dispatch({\n        type: 'ERROR',\n        error: error_.message,\n      });\n    }\n  }, [payerIds, spaceIds]);\n\n  const spacesForProvider = sanitizeSpaces(spaces.concat(spacesFromProps));\n  return (\n    <SpacesContext.Provider\n      value={{ spaces: spacesForProvider, loading, error }}\n    >\n      {isFunction(children)\n        ? (() => children({ spaces: spacesForProvider, loading, error }))()\n        : children}\n    </SpacesContext.Provider>\n  );\n};\n\nexport const useSpaces = (...ids) => {\n  const { spaces = [] } = useContext(SpacesContext) || {};\n\n  const idsIsEmpty = !ids || ids.length === 0;\n  const callerIsExpectingFirstSpace =\n    ids && ids.length === 1 && ids[0] === undefined;\n\n  if (callerIsExpectingFirstSpace && spaces.length > 1) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `You did not pass an ID in to find a space, and there is more than 1 space in the space array. Returning all.`\n    );\n  }\n\n  const shouldReturnAllSpaces = idsIsEmpty || callerIsExpectingFirstSpace;\n  if (shouldReturnAllSpaces) {\n    return spaces;\n  }\n\n  // Try to match by space id first, else match by payer id\n  const filteredSpaces = ids.map(id => {\n    let [spc] = spaces.filter(s => s.id === id);\n\n    if (!spc) {\n      [spc] = spaces.filter(s => (s.payerIDs || []).some(p => p === id));\n    }\n    return spc;\n  });\n  return filteredSpaces;\n};\n\nSpaces.propTypes = {\n  clientId: PropTypes.string.isRequired,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  query: PropTypes.string,\n  variables: PropTypes.object,\n  spaceIds: PropTypes.arrayOf(PropTypes.string),\n  payerIds: PropTypes.arrayOf(PropTypes.string),\n  spaces: PropTypes.arrayOf(PropTypes.object),\n};\n\nSpaces.defaultProps = {\n  query: `\n    query($ids: [String!], $payerIDs: [String!], $types: [String!], $page: Int){\n      spaces(ids: $ids, payerIDs: $payerIDs, types: $types, page: $page){\n        totalCount\n        perPage\n        page\n        spaces{\n          id\n          name\n          description\n          link {\n            url\n          }\n          payerIDs\n          parentIDs\n          metadata{\n            name\n            value\n          }\n          images{\n            name\n            value\n          }\n          url\n        }\n      }\n    }\n  `,\n  variables: { types: ['space'] },\n  spaceIds: [],\n  payerIds: [],\n  spaces: [],\n};\n\nexport default Spaces;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\nimport Img from 'react-image';\nimport get from 'lodash.get';\nimport { useSpaces, useSpacesContext } from './Spaces';\n\nconst skeletonPropType = PropTypes.shape({\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n});\n\nconst Loader = ({ skeletonProps, ...rest }) => (\n  <span {...rest}>\n    <Skeleton {...skeletonProps} />\n  </span>\n);\nLoader.propTypes = {\n  skeletonProps: skeletonPropType,\n};\nLoader.defaultProps = {\n  skeletonProps: {\n    height: '100%',\n  },\n};\n\nconst SpacesImage = ({\n  spaceId,\n  payerId,\n  imageType,\n  fallback,\n  skeletonProps,\n  ...props\n}) => {\n  const [space = {}] = useSpaces(spaceId || payerId);\n  const { loading } = useSpacesContext() || {};\n\n  const id = spaceId || payerId || space.id;\n  let url = get(space, imageType);\n\n  if (!url && loading) {\n    return (\n      <Loader\n        data-testid={`space-${imageType}-${id}-loading`}\n        skeletonProps={skeletonProps}\n        {...props}\n      />\n    );\n  }\n\n  // We can probably remove this at some point once our spaces data is complete\n  if (!url && !loading && fallback) {\n    url = fallback;\n  }\n\n  if (!url || !id) return null;\n\n  return (\n    <Img\n      data-testid={`space-${imageType}-${id}`}\n      src={url}\n      alt={`Space ${imageType}`}\n      loader={\n        <Loader\n          data-testid={`space-${imageType}-${id}`}\n          skeletonProps={skeletonProps}\n          {...props}\n        />\n      }\n      {...props}\n    />\n  );\n};\n\nSpacesImage.propTypes = {\n  spaceId: PropTypes.string,\n  payerId: PropTypes.string,\n  fallback: PropTypes.string,\n  imageType: PropTypes.string,\n  skeletonProps: skeletonPropType,\n};\n\nSpacesImage.defaultProps = {\n  imageType: 'url',\n};\n\n// Adapted from https://github.com/Availity/availity-react/blob/master/packages/reactstrap-validation-select/AvResourceSelect.js\nconst ucFirst = str => str && str.charAt(0).toUpperCase() + str.slice(1);\n\nSpacesImage.create = defaults => {\n  const SpecificSpacesImage = props => <SpacesImage {...defaults} {...props} />;\n\n  SpecificSpacesImage.displayName = `Spaces${ucFirst(defaults.imageType)}`;\n  return SpecificSpacesImage;\n};\n\nexport default SpacesImage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Disclaimer } from '@availity/typography';\nimport ReactMarkdown from 'react-markdown';\n\nimport { useSpaces } from './Spaces';\n\nconst SpacesDisclaimer = ({ styled, spaceId, markdown, ...props }) => {\n  const [space = {}] = useSpaces(spaceId);\n  const { description: disclaimer } = space;\n\n  if (disclaimer) {\n    const children = markdown ? (\n      <ReactMarkdown source={disclaimer} />\n    ) : (\n      disclaimer\n    );\n\n    return (\n      <Disclaimer\n        data-testid={`spaces-disclaimer-${spaceId || space.id}`}\n        styled={styled}\n        {...props}\n      >\n        {children}\n      </Disclaimer>\n    );\n  }\n\n  return null;\n};\n\nSpacesDisclaimer.defaultProps = {\n  markdown: false,\n};\n\nSpacesDisclaimer.propTypes = {\n  spaceId: PropTypes.string,\n  markdown: PropTypes.bool,\n  styled: PropTypes.bool,\n};\n\nexport default SpacesDisclaimer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Agreement } from '@availity/typography';\nimport ReactMarkdown from 'react-markdown';\n\nimport { useSpaces } from './Spaces';\n\nconst SpacesAgreement = ({ spaceId, markdown, ...props }) => {\n  const [space = {}] = useSpaces(spaceId);\n  const { description: agreement } = space;\n\n  if (agreement) {\n    const children = markdown ? (\n      <ReactMarkdown source={agreement} />\n    ) : (\n      agreement\n    );\n\n    return (\n      <Agreement\n        data-testid={`spaces-agreement-${spaceId || space.id}`}\n        {...props}\n      >\n        {children}\n      </Agreement>\n    );\n  }\n\n  return null;\n};\n\nSpacesAgreement.defaultProps = {\n  markdown: false,\n};\n\nSpacesAgreement.propTypes = {\n  spaceId: PropTypes.string,\n  markdown: PropTypes.bool,\n};\n\nexport default SpacesAgreement;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useSpaces } from './Spaces';\n\nconst SpacesGhostText = ({ spaceId, ...props }) => {\n  const [space = {}] = useSpaces(spaceId);\n\n  if (space.isGhost) {\n    return (\n      <small className=\"ghost-text\" data-testid=\"spaces-ghost-text\" {...props}>\n        <em>{space.metadata.ghostText}</em>\n      </small>\n    );\n  }\n  return null;\n};\n\nSpacesGhostText.propTypes = {\n  spaceId: PropTypes.string,\n};\n\nexport default SpacesGhostText;\n","import Spaces, {\n  useSpaces,\n  useSpacesContext,\n  SpacesContext,\n} from './src/Spaces';\nimport SpacesImage from './src/SpacesImage';\nimport SpacesDisclaimer from './src/SpacesDisclaimer';\nimport SpacesAgreement from './src/SpacesAgreement';\nimport SpacesGhostText from './src/SpacesGhostText';\nimport { sanitizeSpaces } from './src/helpers';\n\nconst SpacesLogo = SpacesImage.create({\n  imageType: 'images.logo',\n});\n\nconst SpacesTile = SpacesImage.create({\n  imageType: 'images.tile',\n});\n\nconst SpacesBillboard = SpacesImage.create({\n  imageType: 'images.billboard',\n});\n\nexport default Spaces;\n\nexport {\n  SpacesLogo,\n  SpacesTile,\n  SpacesBillboard,\n  SpacesImage,\n  SpacesDisclaimer,\n  SpacesAgreement,\n  SpacesGhostText,\n  useSpaces,\n  useSpacesContext,\n  SpacesContext,\n  sanitizeSpaces,\n};\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Breadcrumbs from '@availity/breadcrumbs';\nimport AppIcon from '@availity/app-icon';\nimport Feedback from '@availity/feedback';\nimport Spaces, {\n  SpacesLogo,\n  useSpaces,\n  useSpacesContext,\n} from '@availity/spaces';\n\nconst PageHeader = ({\n  payerId,\n  spaceName,\n  spaceId,\n  children,\n  appName,\n  appAbbr,\n  iconColor,\n  branded,\n  crumbs,\n  feedback: showFeedback,\n  feedbackProps,\n  titleProps: { className: titleClassName, ...restTitleProps },\n  renderRightContent: RenderRightContent,\n  renderRightClassName,\n  component,\n  tag: Tag,\n  clientId,\n  iconSrc,\n  iconAlt,\n  homeUrl,\n  linkTag,\n  className,\n  ...props\n}) => {\n  const [spaceForSpaceID, spaceForPayerID] = useSpaces(spaceId, payerId);\n  const { loading: spacesIsLoading } = useSpacesContext() || {};\n\n  const _space = spaceForSpaceID || spaceForPayerID;\n\n  let payerLogo = null;\n  if (payerId) {\n    const logoAttrs = {\n      spaceId,\n      payerId,\n      className: 'd-inline-flex',\n      skeletonProps: {\n        width: 180,\n        height: '100%',\n      },\n    };\n    payerLogo =\n      spaceForPayerID || spacesIsLoading ? (\n        <SpacesLogo {...logoAttrs} />\n      ) : (\n        <Spaces\n          spaceIds={spaceId ? [spaceId] : undefined}\n          payerIds={[payerId]}\n          clientId={clientId}\n        >\n          <SpacesLogo {...logoAttrs} />\n        </Spaces>\n      );\n  }\n\n  const _spaceName = spaceName || (_space && _space.name);\n  if (spaceId || spaceName) {\n    const url =\n      spaceForSpaceID && spaceForSpaceID.link && spaceForSpaceID.link.url\n        ? spaceForSpaceID.link.url\n        : `/web/spaces/spaces/#/${spaceId}`;\n    crumbs = [{ name: _spaceName, url }];\n  }\n\n  const feedback = useMemo(\n    () => (\n      <Feedback\n        appName={appName}\n        className={`d-inline-flex flex-shrink-0 ${payerId ? 'mx-3' : ''}`}\n        {...feedbackProps}\n      />\n    ),\n    [appName, feedbackProps, payerId]\n  );\n\n  return (\n    <>\n      <div className=\"d-flex align-items-start flex-shrink-0\">\n        {React.isValidElement(crumbs) ? (\n          crumbs\n        ) : (\n          <Breadcrumbs\n            crumbs={crumbs}\n            active={appName || children}\n            homeUrl={homeUrl}\n            linkTag={linkTag}\n          />\n        )}\n        {component}\n      </div>\n      <div\n        className={classNames(\n          'page-header page-header-brand d-flex justify-content-between align-items-end',\n          className\n        )}\n        data-testid=\"page-header\"\n        {...props}\n      >\n        <Tag\n          className={classNames(\n            'page-header-title page-header-left d-flex align-items-center mb-0',\n            titleClassName\n          )}\n          data-testid=\"page-header-title\"\n          {...restTitleProps}\n        >\n          {!payerId && appAbbr && (\n            <AppIcon\n              className=\"mr-2\"\n              data-testid=\"page-header-app-icon\"\n              color={iconColor}\n              branded={branded}\n              title={appName}\n              src={iconSrc}\n              alt={iconAlt}\n            >\n              {appAbbr}\n            </AppIcon>\n          )}\n          {children || <h1 className=\"mb-0\">{appName}</h1>}\n        </Tag>\n        {!RenderRightContent ? (\n          <div className=\"page-header-left d-flex flex-wrap flex-md-nowrap flex-grow align-items-end justify-content-end\">\n            {showFeedback && feedback}\n            {payerLogo}\n          </div>\n        ) : (\n          <RenderRightContent\n            className={renderRightClassName}\n            payerLogo={payerLogo}\n            feedback={feedback}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nPageHeader.propTypes = {\n  className: PropTypes.string,\n  appName: PropTypes.string.isRequired,\n  spaceName: PropTypes.string,\n  spaceId: PropTypes.string,\n  appAbbr: PropTypes.string,\n  iconColor: PropTypes.string,\n  branded: PropTypes.bool,\n  payerId: PropTypes.string,\n  component: PropTypes.element,\n  feedback: PropTypes.bool,\n  feedbackProps: PropTypes.shape({ ...Feedback.propTypes }),\n  titleProps: PropTypes.object,\n  children: PropTypes.node,\n  linkTag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  crumbs: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        url: PropTypes.string,\n      })\n    ),\n    PropTypes.node,\n  ]),\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  renderRightContent: PropTypes.func,\n  renderRightClassName: PropTypes.string,\n  homeUrl: PropTypes.string,\n  clientId: PropTypes.string,\n  iconSrc: PropTypes.string,\n  iconAlt: PropTypes.string,\n};\n\nPageHeader.defaultProps = {\n  tag: 'div',\n  // SpaceId and payerId are defaulted to null to prevent `useSpace` from\n  // returning a space we may not want\n  spaceId: null,\n  payerId: null,\n  homeUrl: '/public/apps/dashboard',\n  titleProps: {},\n  renderRightClassName:\n    'page-header-left d-flex flex-wrap flex-md-nowrap flex-grow align-items-end justify-content-end',\n};\n\nexport default PageHeader;\n","import PageHeader from './PageHeader';\n\nexport default PageHeader;\n"],"sourceRoot":""}